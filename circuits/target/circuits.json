{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3001996408795079386,"abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"7Z3damIxFIXf5Vx7kZ3snR9fZSjFtrYIosXqwCB999Hi6WTPiIOUdVFcl0eTBflcpHwhnO6Hp/nD7uV+sXpevw3TH/thuX6cbRfr1eFpP8Tw8dnb62x1fHzbzjbbYZqyTYb56mmYqtj7ZHheLOfDNMv75N+hlsehMXwOjXZmaCzSTmNjSenyYCllDJbS7D+Dw2eyhFz7wXeTIcoNrDHewBrTuTWa6GmKWf7+a9QbWKOdXWMJpylZpF/jcUa+qt3HGeXqGfXqGe3cjKwjpyJ6+bcyG8Ot/YGU4/f8WVMgjh6HEEePI34Rh9ZxqAXpcRzDEzJcUT/kMdyQ4ZkV7CtYiKPHUYmjx9GAe4gGZLgA9xCNyPDECnYVVCWOHocRR48jI/eQggyvyD2kAcONTtNX0Og0Dkckjh4H0sJMkeFIC7OMDKfTuArSaRwOnlD2ODLSwrIgw5EWlhMyXFnBvoJ0GoeDJ5QOB9LCckWGIy2sBGQ4naavYKHTOBw8oXQ4FLiHFEOGIy2sFGQ4ncZVkE7T46g8oXQ4kBZWkXcYKtLCqiLD6TSugnQah4MnlA4H0sIq8g5DQ1pYQ95haHSavoKNTuNwKHH0OJAW1pB3GBrSwhryDkOj0/QVlECp8Tx4Rul5IEVMQoKmK3AjkWDQdKqN7yHdxvPgUaXngfQxkQBNRxqZSISm03BcD0XJw/HgiaXnkaE7SYGmV+hOgrzXIJGe43oY6TmeBw8uPQ+omUWFpkPNLGZoOj3H95Ce43nw/NLxSFAzSwJNh5pZStB0ZQ9dD+k5ngfPLz0PqJmlCk2HmpkGaDo9x/VQ6TmeB88vPQ9F7iRq0HSomWmBptNzfA/pOY4HX4/xFw+omRn01oNBzezLr2+4nE7P8T2k53gePL/0PKBmZtBbDxlqZhl66yHTc1wPMz3H81DycDzO/l0vsYw81L0N/e7w8LBZLJeLl/v+vxwcPv452yxmD8v56fF5t3rsvt3+eh2/Gee/btaP86fdZn5M+vjuEP8b","file_map":{"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"61":{"source":"use std::hash::poseidon2;\nmod merkle_tree;\n\nfn main(\n    //Public Input \n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n\n    //private inputs\n    secret: Field,\n    nullifier: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20]\n) {\n    // compute the commitment using poseidon(secret, nullifier)\n    let commitment: Field = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    // check that nullifier matches the nullifier hash \n    let computed_nullifier_hash: Field = poseidon2::Poseidon2::hash([nullifier], 1);\n\n    assert(computed_nullifier_hash == nullifier_hash);\n\n    let computed_root: Field = merkle_tree::computed_merkle_root(commitment, merkle_proof, is_even);\n    assert(computed_root==root);\n\n    let recipient_binding: Field = (recipient*recipient);\n    assert(recipient_binding==(recipient*recipient));\n}","path":"/Users/adityasharma/Desktop/zk-mixer/circuits/src/main.nr"},"62":{"source":"use std::hash::poseidon2;\n\npub fn computed_merkle_root(\n    leaf: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20]\n)-> Field{\n    // mutable variable to store the has of the current level\n\n    let mut hash: Field = leaf;\n    let mut left:Field= hash;\n    let mut right: Field = hash;\n    // increment through the levels\n    for i in 0 ..20 {\n\n         if is_even[i]{\n            left = hash;\n            right = merkle_proof[i];\n        }\n        else{\n             left = merkle_proof[i];\n            right = hash;\n        }\n\n        hash = poseidon2::Poseidon2::hash([left,right], 2);\n        \n    }\n    // return the root of the merkle_tree\n    hash \n\n}\n","path":"/Users/adityasharma/Desktop/zk-mixer/circuits/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}